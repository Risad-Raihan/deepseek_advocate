#!/usr/bin/env python3
"""
Phase 1 Test Script - Bengali Legal Advocate
Quick test of document processing and vector store functionality
"""

import sys
from pathlib import Path
import logging

# Add src to path
sys.path.append(str(Path(__file__).parent / "src"))

def test_imports():
    """Test if all modules can be imported"""
    print("üß™ Testing module imports...")
    
    try:
        from src.document_processor import LegalDocumentProcessor
        print("‚úÖ LegalDocumentProcessor imported successfully")
    except Exception as e:
        print(f"‚ùå Error importing LegalDocumentProcessor: {e}")
        return False
    
    try:
        from src.bengali_processor import BengaliLegalProcessor
        print("‚úÖ BengaliLegalProcessor imported successfully")
    except Exception as e:
        print(f"‚ùå Error importing BengaliLegalProcessor: {e}")
        return False
    
    try:
        from src.vector_store import LegalVectorStore
        print("‚úÖ LegalVectorStore imported successfully")
    except Exception as e:
        print(f"‚ùå Error importing LegalVectorStore: {e}")
        return False
    
    try:
        from configs.model_config import ModelConfig
        print("‚úÖ ModelConfig imported successfully")
    except Exception as e:
        print(f"‚ùå Error importing ModelConfig: {e}")
        return False
    
    return True

def test_bengali_processor():
    """Test Bengali text processing functionality"""
    print("\nüî§ Testing Bengali text processing...")
    
    try:
        from src.bengali_processor import BengaliLegalProcessor
        
        processor = BengaliLegalProcessor()
        
        # Test text preprocessing
        sample_text = "‡¶è‡¶á   ‡¶Ü‡¶á‡¶®‡ßá   ‡¶ß‡¶æ‡¶∞‡¶æ  ‡ß®‡ß´  ‡¶è  ‡¶¨‡¶≤‡¶æ  ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá  ‡¶Ø‡ßá"
        processed = processor.preprocess_bengali_legal_text(sample_text)
        print(f"‚úÖ Text preprocessing: '{sample_text}' ‚Üí '{processed}'")
        
        # Test legal entity extraction
        legal_text = "‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ‡¶¶‡ßá‡¶∂‡ßá‡¶∞ ‡¶∏‡¶Ç‡¶¨‡¶ø‡¶ß‡¶æ‡¶®‡ßá‡¶∞ ‡¶ß‡¶æ‡¶∞‡¶æ ‡ß®‡ß≠ ‡¶Ö‡¶®‡ßÅ‡¶Ø‡¶æ‡¶Ø‡¶º‡ßÄ ‡¶∏‡¶ï‡¶≤ ‡¶®‡¶æ‡¶ó‡¶∞‡¶ø‡¶ï ‡¶Ü‡¶á‡¶®‡ßá‡¶∞ ‡¶¶‡ßÉ‡¶∑‡ßç‡¶ü‡¶ø‡¶§‡ßá ‡¶∏‡¶Æ‡¶æ‡¶®‡•§"
        entities = processor.extract_legal_entities(legal_text)
        print(f"‚úÖ Entity extraction found: {list(entities.keys())}")
        
        # Test query intent
        query = "‡¶§‡¶æ‡¶≤‡¶æ‡¶ï‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶Ü‡¶á‡¶®‡¶ø ‡¶™‡ßç‡¶∞‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º‡¶æ ‡¶ï‡ßÄ?"
        intent = processor.extract_legal_intent(query)
        print(f"‚úÖ Query intent: {intent['intent']} (confidence: {intent['confidence']:.2f})")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Bengali processor test failed: {e}")
        return False

def test_document_processor():
    """Test document processing functionality"""
    print("\nüìÑ Testing document processing...")
    
    try:
        from src.document_processor import LegalDocumentProcessor
        
        # Initialize processor
        processor = LegalDocumentProcessor(data_dir="../data")
        
        # Test document type identification
        test_cases = [
            ("‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ‡¶¶‡ßá‡¶∂‡ßá‡¶∞ ‡¶∏‡¶Ç‡¶¨‡¶ø‡¶ß‡¶æ‡¶®.pdf", "mock constitution content"),
            ("‡¶§‡¶æ‡¶≤‡¶æ‡¶ï ‡¶ì ‡¶ñ‡ßã‡¶∞‡¶™‡ßã‡¶∂ ‡¶Ü‡¶á‡¶®.pdf", "‡¶§‡¶æ‡¶≤‡¶æ‡¶ï ‡¶∏‡¶Ç‡¶ï‡ßç‡¶∞‡¶æ‡¶®‡ßç‡¶§ ‡¶™‡¶æ‡¶∞‡¶ø‡¶¨‡¶æ‡¶∞‡¶ø‡¶ï"),
            ("‡¶¨‡¶æ‡¶°‡¶º‡ßÄ ‡¶≠‡¶æ‡¶°‡¶º‡¶æ ‡¶®‡¶ø‡¶Ø‡¶º‡¶®‡ßç‡¶§‡ßç‡¶∞‡¶£ ‡¶Ü‡¶á‡¶®.pdf", "‡¶≠‡¶æ‡¶°‡¶º‡¶æ ‡¶®‡¶ø‡¶Ø‡¶º‡¶®‡ßç‡¶§‡ßç‡¶∞‡¶£")
        ]
        
        for filename, content in test_cases:
            doc_type = processor._identify_document_type(filename, content)
            print(f"‚úÖ Document type identification: {filename} ‚Üí {doc_type}")
        
        # Test entity extraction
        sample_legal_text = """
        ‡¶ß‡¶æ‡¶∞‡¶æ ‡ß®‡ß´: ‡¶∏‡¶ï‡¶≤ ‡¶®‡¶æ‡¶ó‡¶∞‡¶ø‡¶ï ‡¶Ü‡¶á‡¶®‡ßá‡¶∞ ‡¶¶‡ßÉ‡¶∑‡ßç‡¶ü‡¶ø‡¶§‡ßá ‡¶∏‡¶Æ‡¶æ‡¶® ‡¶è‡¶¨‡¶Ç ‡¶Ü‡¶á‡¶®‡ßá‡¶∞ ‡¶∏‡¶Æ‡¶æ‡¶® ‡¶Ü‡¶∂‡ßç‡¶∞‡¶Ø‡¶º ‡¶≤‡¶æ‡¶≠‡ßá‡¶∞ ‡¶Ö‡¶ß‡¶ø‡¶ï‡¶æ‡¶∞‡ßÄ‡•§
        ‡ßß‡ßØ‡ß≠‡ßß ‡¶∏‡¶æ‡¶≤‡ßá‡¶∞ ‡¶∏‡ßç‡¶¨‡¶æ‡¶ß‡ßÄ‡¶®‡¶§‡¶æ‡¶∞ ‡¶ò‡ßã‡¶∑‡¶£‡¶æ‡¶™‡¶§‡ßç‡¶∞ ‡¶Ü‡¶á‡¶® ‡¶Ö‡¶®‡ßÅ‡¶Ø‡¶æ‡¶Ø‡¶º‡ßÄ ‡¶è‡¶á ‡¶¨‡¶ø‡¶ß‡¶æ‡¶® ‡¶ï‡¶æ‡¶∞‡ßç‡¶Ø‡¶ï‡¶∞‡•§
        """
        
        entities = processor.extract_legal_entities(sample_legal_text)
        print(f"‚úÖ Legal entity extraction: {dict(entities)}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Document processor test failed: {e}")
        return False

def test_vector_store():
    """Test vector store initialization"""
    print("\nüîç Testing vector store...")
    
    try:
        from src.vector_store import LegalVectorStore
        
        # Initialize vector store
        vector_store = LegalVectorStore(vector_db_path="test_vector_db")
        
        print("‚úÖ Vector store initialized")
        
        # Test embedding model loading
        test_text = "‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ‡¶¶‡ßá‡¶∂‡ßá‡¶∞ ‡¶∏‡¶Ç‡¶¨‡¶ø‡¶ß‡¶æ‡¶®"
        embedding = vector_store.embedding_model.encode([test_text])
        print(f"‚úÖ Embedding generated: shape {embedding.shape}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Vector store test failed: {e}")
        return False

def test_config():
    """Test configuration"""
    print("\n‚öôÔ∏è Testing configuration...")
    
    try:
        from configs.model_config import ModelConfig
        
        # Test config validation
        validation = ModelConfig.validate_config()
        print(f"‚úÖ Config validation: valid={validation['valid']}")
        
        if validation['warnings']:
            for warning in validation['warnings']:
                print(f"‚ö†Ô∏è Warning: {warning}")
        
        # Test directory creation
        ModelConfig.ensure_directories()
        print("‚úÖ Required directories ensured")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Configuration test failed: {e}")
        return False

def main():
    """Run all tests"""
    print("üèõÔ∏è Bengali Legal Advocate - Phase 1 Testing")
    print("=" * 60)
    
    # Setup basic logging
    logging.basicConfig(level=logging.WARNING)  # Suppress info logs during testing
    
    tests = [
        ("Module Imports", test_imports),
        ("Bengali Processing", test_bengali_processor),
        ("Document Processing", test_document_processor),
        ("Vector Store", test_vector_store),
        ("Configuration", test_config)
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        try:
            if test_func():
                passed += 1
                print(f"‚úÖ {test_name}: PASSED\n")
            else:
                print(f"‚ùå {test_name}: FAILED\n")
        except Exception as e:
            print(f"‚ùå {test_name}: ERROR - {e}\n")
    
    print("=" * 60)
    print(f"üìä Test Results: {passed}/{total} tests passed")
    
    if passed == total:
        print("üéâ All tests passed! Phase 1 is ready to run.")
        print("Next step: Run 'python main.py' to execute full Phase 1 processing")
        return 0
    else:
        print("‚ùå Some tests failed. Please check the errors above.")
        return 1

if __name__ == "__main__":
    exit_code = main()
    sys.exit(exit_code) 